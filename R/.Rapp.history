ggplot(data = df_ha |> filter(!pref %in% c("全国", "北海道", "沖縄県"))) +#
  geom_line(aes(x = year, y = value, group = pref, color = pref)) +#
  gghighlight(value > 100, label_key = NULL) +#
  geom_text(data = df_ha |> filter(pref %in% highlighted_prefs, pref != "全国"), aes(x = 2000, y = value, label = pref, group = pref), hjust = 1.5, family = "HiraKakuProN-W3") +#
  labs(title = "キウイフルーツの結果樹面積", x = "年", y = "結果樹面積（ha）") +#
  theme_minimal() +#
  theme(legend.title = element_blank(),#
        text = element_text(family = "HiraKakuProN-W3"))
df_max_values
ggplot(data = df_ha |> filter(!pref %in% c("全国", "北海道", "沖縄県"))) +#
  geom_line(aes(x = year, y = value, group = pref, color = pref)) +#
  gghighlight(value > 100, label_key = NULL) +#
  geom_text(data = df_max_values, aes(x = 2000, y = max_value, label = pref), hjust = 1.5, family = "HiraKakuProN-W3") +#
  labs(title = "キウイフルーツの結果樹面積", x = "年", y = "結果樹面積（ha）") +#
  theme_minimal() +#
  theme(legend.title = element_blank(),#
        text = element_text(family = "HiraKakuProN-W3"))
df_max_values
df_max_values |> filter(pref @= "全国")
df_max_values |> filter(pref != "全国")
ggplot(data = df_ha |> filter(!pref %in% c("全国", "北海道", "沖縄県"))) +#
  geom_line(aes(x = year, y = value, group = pref, color = pref)) +#
  gghighlight(value > 100, label_key = NULL) +#
  geom_text(data = df_max_values |> filter(pref != "全国"), aes(x = 2000, y = max_value, label = pref), hjust = 1.5, family = "HiraKakuProN-W3") +#
  labs(title = "キウイフルーツの結果樹面積", x = "年", y = "結果樹面積（ha）") +#
  theme_minimal() +#
  theme(legend.title = element_blank(),#
        text = element_text(family = "HiraKakuProN-W3"))
df_max_values <- df_harvest |>#
  filter(pref != "北海道", pref != "沖縄県") |>#
  group_by(pref) |> #
  summarize(max_value = max(value, na.rm = TRUE))#
highlighted_prefs <- df_max_values |> #
  filter(max_value > 100) |> #
  pull(pref)
highlighted_prefs
highlighted_prefs <- df_max_values |> #
  filter(max_value > 3000) |> #
  pull(pref)
highlighted_prefs
ggplot(data = df_harvest |> filter(!pref %in% c("全国", "北海道", "沖縄県"))) +#
  geom_line(aes(x = year, y = value, group = pref, color = pref)) +#
  gghighlight(value > 3000) +#
  geom_text(data = df_max_values |> filter(pref != "全国"), aes(x = 2000, y = max_value, label = pref), hjust = 1.5, family = "HiraKakuProN-W3") +#
  labs(title = "キウイフルーツの収穫量", x = "年", y = "収穫量（t）") +#
  theme_minimal() +#
  theme(legend.title = element_blank(),#
        text = element_text(family = "HiraKakuProN-W3"))
table(df$year)
valid_years <- df_ha %>%#
  group_by(year) %>%#
  summarize(all_na = all(is.na(value))) %>%#
  filter(!all_na) %>%#
  pull(year)
valid_years
valid_years <- df %>%#
  group_by(year) %>%#
  summarize(all_na = all(is.na(value))) %>%#
  filter(!all_na) %>%#
  pull(year)
valid_years
valid_years <- df %>%#
  group_by(year) %>%#
  summarize(all_na = all(is.na(value))) %>%#
  filter(!all_na) %>%#
  pull(year)
valid_years
str(valid_years)
df |>#
  filter(year %in% valid_years)
df
range(df$year)
statsDataId <- "0003287627"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))
df_2017 <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId#
)
df_2017
names(df_2017)
unique(df_2017$`(F006-2017-2)集計項目`)
head(data.frame(df_ha))
head(data.frame(df_2017 |>#
  mutate(year = 2017) |>#
  mutate(pref = `(F006-2017-028)都道府県`) |>#
  mutate(item = `(F006-2017-2)集計項目`)))
head(data.frame(df_2017 |>#
  mutate(year = 2017) |>#
  mutate(pref = `(F006-2017-028)都道府県`) |>#
  mutate(item = `(F006-2017-2)集計項目`)) |> select(pref, year, item, value))
df
df <- df |>#
  filter(year %in% valid_years) |>#
  mutate(item = `結果樹面積・10a当たり収量・収穫量・出荷量`) |>#
  select(pref, year, item, value, unit))
df <- df |>#
  filter(year %in% valid_years) |>#
  mutate(item = `結果樹面積・10a当たり収量・収穫量・出荷量`) |>#
  select(pref, year, item, value, unit)
df
df_2017
df_2017 <- df_2017 |>#
  mutate(year = 2017) |>#
  mutate(pref = `(F006-2017-028)都道府県`) |>#
  mutate(item = `(F006-2017-2)集計項目`) |>#
  select(pref, year, item, value, unit))
df_2017 <- df_2017 |>#
  mutate(year = 2017) |>#
  mutate(pref = `(F006-2017-028)都道府県`) |>#
  mutate(item = `(F006-2017-2)集計項目`) |>#
  select(pref, year, item, value, unit)
df_2017
statsDataId <- "0002018868"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))
df_2021 <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId#
)
df_2021
names(df_2021)
df_2021 <- df_2021 |>#
  mutate(year = 2021) |>#
  mutate(pref = `(F006-03-2-017)全国・都道府県`) |>#
  mutate(item = `(F006-03-1-004)面積・収量・収穫量・出荷量`) |>#
  select(pref, year, item, value, unit)
df_2021
statsDataId <- "0001931847"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))
df_2020 <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId#
)
df_2020
names(df_2020)
df_2020 <- df_2020 |>#
  mutate(year = 2021) |>#
  mutate(pref = `(F006-02-2-004)都道府県`) |>#
  mutate(item = `(F006-02-1-004)面積・収量・収穫量・出荷量`) |>#
  select(pref, year, item, value, unit)
df_2020
statsDataId <- "0001791217"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))
df_2018 <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId#
)
names(df_2018)
df_2018
df_2018 <- df_2018 |>#
  mutate(year = 2017) |>#
  mutate(pref = `(F006-30-2-002)都道府県`) |>#
  mutate(item = `(F006-30-1-004)対比無し_集計項目`) |>#
  select(pref, year, item, value, unit)
df_2018
library(estatapi)#
#
appId <- keyring::key_get("e-stat")#
statsDataId <- "0003313884"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))#
#
# 統計データ取得#
df <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId#
)#
#
library(dplyr)#
library(tidyr)#
#
df$year <- as.integer(sub("年", "", df$`時間軸（年次）`))#
unique_prefecture <- unique(df$`全国、都府県、全国農業地域`)#
df$pref <- factor(df$`全国、都府県、全国農業地域`, levels = unique_prefecture, labels = unique_prefecture)#
#
# すべてNAの年のデータを削除#
valid_years <- df %>%#
  group_by(year) %>%#
  summarize(all_na = all(is.na(value))) %>%#
  filter(!all_na) %>%#
  pull(year)#
df <- df |>#
  filter(year %in% valid_years) |>#
  mutate(item = `結果樹面積・10a当たり収量・収穫量・出荷量`) |>#
  select(pref, year, item, value, unit)
pref
df
statsDataId <- "0003287627"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))#
#
# 統計データ取得#
df_2017 <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId#
)#
#
df_2017 <- df_2017 |>#
  mutate(year = 2017) |>#
  mutate(pref = `(F006-2017-028)都道府県`) |>#
  mutate(item = `(F006-2017-2)集計項目`) |>#
  select(pref, year, item, value, unit)
statsDataId <- "0001791217"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))#
#
# 統計データ取得#
df_2018 <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId#
)#
#
df_2018 <- df_2018 |>#
  mutate(year = 2017) |>#
  mutate(pref = `(F006-30-2-002)都道府県`) |>#
  mutate(item = `(F006-30-1-004)対比無し_集計項目`) |>#
  select(pref, year, item, value, unit)
statsDataId <- "0001931847"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))#
#
# 統計データ取得#
df_2020 <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId#
)#
#
df_2020 <- df_2020 |>#
  mutate(year = 2021) |>#
  mutate(pref = `(F006-02-2-004)都道府県`) |>#
  mutate(item = `(F006-02-1-004)面積・収量・収穫量・出荷量`) |>#
  select(pref, year, item, value, unit)
statsDataId <- "0002018868"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))#
#
# 統計データ取得#
df_2021 <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId#
)#
#
df_2021 <- df_2021 |>#
  mutate(year = 2021) |>#
  mutate(pref = `(F006-03-2-017)全国・都道府県`) |>#
  mutate(item = `(F006-03-1-004)面積・収量・収穫量・出荷量`) |>#
  select(pref, year, item, value, unit)
df <- cbind(df, df_2017, df_2018, df_2020, df_2021)
names(df)
names(df_2017)
names(df_2018)
names(df_2020)
names(df_2021)
df <- rbind(df, df_2017, df_2018, df_2020, df_2021)
df
df_ha <- df |>#
  filter(grepl("結果樹面積", item))#
#
df_harvest <- df |>#
  filter(grepl("収穫量", item))#
#
df_shipment <- df |>#
  filter(grepl("出荷量", item))
range(df$year)
df_2017
df_2018
df_2020
df_2021
str(df_2020)
unique(df_2020$pref)
statsDataId <- "0001931847"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))#
#
# 統計データ取得#
df_2020 <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId#
)
df_2020 |>#
  mutate(year = 2021) |>#
  filter(grepl("全国|（都道府県）", `(F006-02-2-004)都道府県`)) |>#
  mutate(pref = sub("（都道府県）_", "", `(F006-02-2-004)都道府県`)) |>#
  mutate(item = `(F006-02-1-004)面積・収量・収穫量・出荷量`) |>#
  select(pref, year, item, value, unit)
a<-df_2020 |>#
  mutate(year = 2021) |>#
  filter(grepl("全国|（都道府県）", `(F006-02-2-004)都道府県`)) |>#
  mutate(pref = sub("（都道府県）_", "", `(F006-02-2-004)都道府県`)) |>#
  mutate(item = `(F006-02-1-004)面積・収量・収穫量・出荷量`) |>#
  select(pref, year, item, value, unit)
table(a$pref)
df_2020 |>#
  mutate(year = 2021) |>#
  filter(grepl("全国|（都道府県）", `(F006-02-2-004)都道府県`))
df_2020 |>#
  mutate(year = 2021) |>#
  filter(grepl("全国|（都道府県）_", `(F006-02-2-004)都道府県`)) |>#
  mutate(pref = sub("（都道府県）_", "", `(F006-02-2-004)都道府県`))
df_2020 |>#
  mutate(year = 2021) |>#
  filter(grepl("全国|（都道府県）_", `(F006-02-2-004)都道府県`)) |>#
  filter(!grepl("（全国農業地域）_", `(F006-02-2-004)都道府県`))
df_2020 |>#
  mutate(year = 2021) |>#
  filter(grepl("^全国|（都道府県）_", `(F006-02-2-004)都道府県`))
df_2020
df_2019
df_2018
df_2017
df_2021
table(df_2021$pref)
ifelse(df_2021$pref %in% c("北海道", "東京", "京都", "大阪"),#
  paste0(df_2021$pref, c("", "都", "府", "府")[match(df_2021$pref, c("北海道", "東京", "京都", "大阪"))]),#
  paste0(df_2021$pref, "県"))
ifelse(df_2021$pref %in% c("全国", "北海道", "東京", "京都", "大阪"),#
  paste0(df_2021$pref, c("", "", "都", "府", "府")[match(df_2021$pref, c("全国", "北海道", "東京", "京都", "大阪"))]),#
  paste0(df_2021$pref, "県"))
df
df_wide <- df |>#
  pivot_wider(names_from = pref, values_from = value)
df_wide
names(df_wide)
library(DT)
statsDataId <- "0003424060"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))#
#
# 統計データ取得#
df_2019 <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId#
)
df_2019
names(df_2019)
meta_info
meta_info$cat02$`@code`[grep("キウイフルーツ", meta_info$cat02$`@name`)]
cat02 = meta_info$cat02$`@code`[grep("キウイフルーツ", meta_info$cat02$`@name`)]#
#
# 統計データ取得#
df <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId,#
  cat02 = cat02#
)
df
cdCat02 = meta_info$cat02$`@code`[grep("キウイフルーツ", meta_info$cat02$`@name`)]#
#
# 統計データ取得#
df <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId,#
  cdCat02 = cdCat02#
)
df
df_2019 <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId,#
  cdCat02 = cdCat02#
)
df_2019
names(df_2019)
unique(df_2019$"(F006-30-2-006)年次")
df_2019 <- df_2019 |>#
  mutate(year = 2019) |>#
  mutate(pref = `(F006-30-2-002)都道府県`) |>#
  mutate(item = `(F006-1-007)集計項目`) |>#
  select(pref, year, item, value, unit)
unique(df_2019$pref)
library(estatapi)#
#
appId <- keyring::key_get("e-stat")#
statsDataId <- "0003313884"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))
statsDataId <- "0003287627"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))
# 統計データ取得#
df_2017 <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId#
)#
#
df_2017 <- df_2017 |>#
  mutate(year = 2017) |>#
  mutate(pref = `(F006-2017-028)都道府県`) |>#
  mutate(item = `(F006-2017-2)集計項目`) |>#
  select(pref, year, item, value, unit)
library(estatapi)#
#
appId <- keyring::key_get("e-stat")#
statsDataId <- "0003313884"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))
# 統計データ取得#
df <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId#
)#
#
library(dplyr)#
library(tidyr)#
#
df$year <- as.integer(sub("年", "", df$`時間軸（年次）`))#
unique_prefecture <- unique(df$`全国、都府県、全国農業地域`)#
df$pref <- factor(df$`全国、都府県、全国農業地域`, levels = unique_prefecture, labels = unique_prefecture)#
#
# すべてNAの年のデータを削除#
valid_years <- df |>#
  group_by(year) |>#
  summarize(all_na = all(is.na(value))) |>#
  filter(!all_na) |>#
  pull(year)#
df <- df |>#
  filter(year %in% valid_years) |>#
  mutate(item = `結果樹面積・10a当たり収量・収穫量・出荷量`) |>#
  select(pref, year, item, value, unit)
statsDataId <- "0003287627"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))
# 統計データ取得#
df_2017 <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId#
)#
#
df_2017 <- df_2017 |>#
  mutate(year = 2017) |>#
  mutate(pref = `(F006-2017-028)都道府県`) |>#
  mutate(item = `(F006-2017-2)集計項目`) |>#
  select(pref, year, item, value, unit)
statsDataId <- "0001791217"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))
# 統計データ取得#
df_2018 <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId#
)#
#
df_2018 <- df_2018 |>#
  mutate(year = 2018) |>#
  mutate(pref = `(F006-30-2-002)都道府県`) |>#
  mutate(item = `(F006-30-1-004)対比無し_集計項目`) |>#
  select(pref, year, item, value, unit)
statsDataId <- "0003424060"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))
cdCat02 = meta_info$cat02$`@code`[grep("キウイフルーツ", meta_info$cat02$`@name`)]#
#
# 統計データ取得#
df_2019 <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId,#
  cdCat02 = cdCat02#
)#
#
df_2019 <- df_2019 |>#
  mutate(year = 2019) |>#
  mutate(pref = `(F006-30-2-002)都道府県`) |>#
  mutate(item = `(F006-1-007)集計項目`) |>#
  select(pref, year, item, value, unit)
statsDataId <- "0001931847"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))
# 統計データ取得#
df_2020 <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId#
)#
#
df_2020 <- df_2020 |>#
  mutate(year = 2020) |>#
  filter(grepl("^全国|（都道府県）_", `(F006-02-2-004)都道府県`)) |>#
  mutate(pref = sub("（都道府県）_", "", `(F006-02-2-004)都道府県`)) |>#
  mutate(item = `(F006-02-1-004)面積・収量・収穫量・出荷量`) |>#
  select(pref, year, item, value, unit)#
#
df_2020$pref <- ifelse(df_2020$pref %in% c("全国", "北海道", "東京", "京都", "大阪"),#
  paste0(df_2020$pref, c("", "", "都", "府", "府")[match(df_2020$pref, c("全国", "北海道", "東京", "京都", "大阪"))]),#
  paste0(df_2020$pref, "県"))
statsDataId <- "0002018868"#
#
# メタ情報取得#
(meta_info <- estat_getMetaInfo(appId = appId, statsDataId = statsDataId))
# 統計データ取得#
df_2021 <- estat_getStatsData(#
  appId = appId,#
  statsDataId = statsDataId#
)#
#
df_2021 <- df_2021 |>#
  mutate(year = 2021) |>#
  mutate(pref = `(F006-03-2-017)全国・都道府県`) |>#
  mutate(item = `(F006-03-1-004)面積・収量・収穫量・出荷量`) |>#
  select(pref, year, item, value, unit)#
#
df_2021$pref <- ifelse(df_2021$pref %in% c("全国", "北海道", "東京", "京都", "大阪"),#
  paste0(df_2021$pref, c("", "", "都", "府", "府")[match(df_2021$pref, c("全国", "北海道", "東京", "京都", "大阪"))]),#
  paste0(df_2021$pref, "県"))
df <- rbind(df, df_2017, df_2018, df_2019, df_2020, df_2021)#
#
df_ha <- df |>#
  filter(grepl("^結果樹面積$", item))#
#
df_harvest <- df |>#
  filter(grepl("^収穫量$", item))#
#
df_shipment <- df |>#
  filter(grepl("^出荷量$", item))#
#
df_average <- df |>#
  filter(grepl("^10ａ当たり収量$", item))#
#
range(df$year)
library(ggplot2)#
library(scales)#
library(gghighlight)#
library(ggsci)#
#
df_ha_head_10 <- df_ha |>#
  filter(pref != "全国") |>#
  arrange(-value) |>#
  pull(pref) |>#
  head(10)
df_ha_head_10
df_ha_head_10 <- df_ha |>#
  filter(pref != "全国") |>#
  arrange(-value) |>#
  pull(pref)
pref
df_ha_head_10
df_ha |>#
  filter(pref != "全国") |>#
  arrange(-value) |>#
  pull(pref)
df_ha
df_ha |>#
  filter(pref != "全国") |>#
  group_by(pref) |>#
  summarize(max_value = max(value)) |>#
  arrange(desc(max_value)) |>#
  head(10) |>#
  pull(pref)
library (ggdist) library (tidyquant)#
library (tidyverse)
library (ggdist)library (tidyquant)#
library (tidyverse)
library (ggdist)
library (tidyquant)
mpg
mpg %>%#
filter(cyl %in% c(4,6,8)) %>%#
gaplot(aes(x = factor (cyl), y = hwy, fill = factor (cyl))) +#
ggdist::stat_halfeye (#
adjust = 0.5,#
justification = -2,#
.width = 0,#
point_colour = NA#
)+#
geom_boxplot(#
width =.12,#
outlier.color = NA,#
alpha = 0.5)
library(ggplot2)
mpg %>%#
filter(cyl %in% c(4,6,8)) %>%#
gaplot(aes(x = factor (cyl), y = hwy, fill = factor (cyl))) +#
ggdist::stat_halfeye (#
adjust = 0.5,#
justification = -2,#
.width = 0,#
point_colour = NA#
)+#
geom_boxplot(#
width =.12,#
outlier.color = NA,#
alpha = 0.5)
mpg %>%#
filter(cyl %in% c(4,6,8)) %>%#
ggplot(aes(x = factor (cyl), y = hwy, fill = factor (cyl))) +#
ggdist::stat_halfeye (#
adjust = 0.5,#
justification = -2,#
.width = 0,#
point_colour = NA#
)+#
geom_boxplot(#
width =.12,#
outlier.color = NA,#
alpha = 0.5)
mpg %>%#
filter(cyl %in% c(4,6,8)) %>%#
ggplot(aes(x = factor (cyl), y = hwy, fill = factor (cyl))) +#
ggdist::stat_halfeye(#
adjust = 0.5,#
justification = -2,#
.width = 0,#
point_colour = NA#
)+#
geom_boxplot(#
width =.12,#
outlier.color = NA,#
alpha = 0.5)
mpg %>%#
filter(cyl %in% c(4,6,8)) %>%#
ggplot(aes(x = factor (cyl), y = hwy, fill = factor (cyl))) +#
ggdist::stat_halfeye(#
adjust = 0.5,#
justification = -2,#
.width = 0,#
point_colour = NA#
)+#
geom_boxplot(#
width =.12,#
outlier.color = NA,#
alpha = 0.5) +ggdist::stat_dots(#
side ="left",#
justification =1.1,#
binwidth = .25)
mpg %>%#
filter(cyl %in% c(4,6,8)) %>%#
ggplot(aes(x = factor (cyl), y = hwy, fill = factor (cyl))) +#
ggdist::stat_halfeye(#
adjust = 0.5,#
justification = -2,#
.width = 0,#
point_colour = NA#
)+#
geom_boxplot(#
width =.12,#
outlier.color = NA,#
alpha = 0.5) +ggdist::stat_dots(#
side ="left",#
justification =1.1,#
binwidth = .25)+scale_fill_tq()
mpg %>%#
filter(cyl %in% c(4,6,8)) %>%#
ggplot(aes(x = factor (cyl), y = hwy, fill = factor (cyl))) +#
ggdist::stat_halfeye(#
adjust = 0.5,#
justification = -2,#
.width = 0,#
point_colour = NA#
)+#
geom_boxplot(#
width =.12,#
outlier.color = NA,#
alpha = 0.5) +ggdist::stat_dots(#
side ="left",#
justification =1.1,#
binwidth = .25)+scale_fill_tq()+theme_tq
mpg %>%#
filter(cyl %in% c(4,6,8)) %>%#
ggplot(aes(x = factor (cyl), y = hwy, fill = factor (cyl))) +#
ggdist::stat_halfeye(#
adjust = 0.5,#
justification = -2,#
.width = 0,#
point_colour = NA#
)+#
geom_boxplot(#
width =.12,#
outlier.color = NA,#
alpha = 0.5) +ggdist::stat_dots(#
side ="left",#
justification =1.1,#
binwidth = .25)+scale_fill_tq()+theme_tq()
mpg %>%#
filter(cyl %in% c(4,6,8)) %>%#
ggplot(aes(x = factor (cyl), y = hwy, fill = factor (cyl))) +#
ggdist::stat_halfeye(#
adjust = 0.5,#
justification = -2,#
.width = 0,#
point_colour = NA#
)+#
geom_boxplot(#
width =.12,#
outlier.color = NA,#
alpha = 0.5) +ggdist::stat_dots(#
side ="left",#
justification =1.1,#
binwidth = .25)+scale_fill_tq()
mpg %>%#
filter(cyl %in% c(4,6,8)) %>%#
ggplot(aes(x = factor (cyl), y = hwy, fill = factor (cyl))) +#
ggdist::stat_halfeye(#
adjust = 0.5,#
justification = -2,#
.width = 0,#
point_colour = NA#
)+#
geom_boxplot(#
width =.12,#
outlier.color = NA,#
alpha = 0.5) +ggdist::stat_dots(#
side ="left",#
justification =1.1,#
binwidth = .25)+scale_fill_tq()+theme_tq()
mpg %>%#
filter(cyl %in% c(4,6,8)) %>%#
ggplot(aes(x = factor (cyl), y = hwy, fill = factor (cyl))) +#
ggdist::stat_halfeye(#
adjust = 0.5,#
justification = -2,#
.width = 0,#
point_colour = NA#
)+#
geom_boxplot(#
width =.12,#
outlier.color = NA,#
alpha = 0.5) +ggdist::stat_dots(#
side ="left",#
justification =1.1,#
binwidth = .25)+scale_fill_tq()+theme_tq()+coord_flip()
library(fude)#
library(ggplot2)#
library(magrittr)#
library(dplyr)#
library(ggrepel)#
# library(ggsn)#
library(gghighlight)#
#
d <- read_fude("~/2022_38.zip")
d
library(dabestr)
?dabest
??dabest
library(tidyr)
?pivot_longer
install.packages('beeswarm')
2*15
20*15
49*2
54*2
1983+40
2023-35
2023-37
2666*3
install.packages("AER")
install.packages("lavaan")
library("nnet")
install.packages("nnet")
install.packages("string2path",#
  repos = c(#
    yutannihilation = "https://yutannihilation.r-universe.dev",#
    CRAN = "https://cloud.r-project.org"#
  )#
)
library(string2path)#
library(ggplot2)#
#
d <- string2path("カラテが\n高まる。", "Noto Sans JP", font_weight = "bold")#
#
d <- tibble::rowid_to_column(d)
d
d
ggplot(d) +#
  geom_path(aes(x, y, group = path_id, colour = factor(glyph_id)),#
            linewidth = 1.5) +#
  theme_minimal() +#
  coord_equal() +#
  theme(legend.position = "top") +#
  scale_colour_viridis_d(option = "H")
d <- string2path("カラテが\n高まる。", "Noto Sans JP", font_weight = "bold")
d <- string2path("カラテが\n高まる。", "HiraKakuProN-W3")
d <- string2path("カラテが\n高まる。", "HiraKakuProN-W6")
d <- string2path("カラテが\n高まる。")
d <- string2path("カラテが\n高まる。", "HiraKaku ProN W6")
d <- string2path("カラテが\n高まる。", "HiraKakuProN W6")
d
library(gganimate)#
d <- string2path("蹴", "Noto Sans JP")#
d <- tibble::rowid_to_column(d)
install.packages("gganimate")
library(gganimate)#
d <- string2path("蹴", "Noto Sans JP")#
d <- tibble::rowid_to_column(d)
ggplot(d) +#
  geom_path(aes(x, y, group = path_id),#
            linewidth = 2, colour = "purple2", lineend = "round") +#
  theme_minimal() +#
  coord_equal() +#
  transition_reveal(rowid)
d <- string2fill("abc", "Iosevka SS08", font_weight = "bold", font_style = "italic")#
#
ggplot(d) +#
  geom_polygon(aes(x, y, group = triangle_id, fill = factor(triangle_id %% 7)),#
               colour = "grey", linewidth = 0.1) +#
  theme_minimal() +#
  coord_equal() +#
  theme(legend.position = "none") +#
  scale_fill_viridis_d(option = "H")
d
ggplot(d) +#
  geom_polygon(aes(x, y, group = triangle_id, fill = factor(triangle_id %% 7)),#
               colour = "grey", linewidth = 0.1) +#
  theme_minimal() +#
  coord_equal() +#
  theme(legend.position = "none") +#
  scale_fill_viridis_d(option = "H")
capabilities()[c("cairo", "X11")]
d <- string2path("カラテが\n高まる。", "Hiragino Mincho ProN", font_weight = "bold")#
#
d <- tibble::rowid_to_column(d)
d
ggplot(d) +#
  geom_path(aes(x, y, group = path_id, colour = factor(glyph_id)),#
            linewidth = 1.5) +#
  theme_minimal() +#
  coord_equal() +#
  theme(legend.position = "top") +#
  scale_colour_viridis_d(option = "H")
d <- string2path("カラテが\n高まる。", "Hiragino Sans", font_weight = "bold")#
#
d <- tibble::rowid_to_column(d)
ggplot(d) +#
  geom_path(aes(x, y, group = path_id, colour = factor(glyph_id)),#
            linewidth = 1.5) +#
  theme_minimal() +#
  coord_equal() +#
  theme(legend.position = "top") +#
  scale_colour_viridis_d(option = "H")
d <- string2path("カラテが\n高まる。", "Noto Serif CJK JP", font_weight = "bold")#
#
d <- tibble::rowid_to_column(d)
d <- string2path("カラテが\n高まる。", "Noto Sans CJK JP", font_weight = "bold")#
#
d <- tibble::rowid_to_column(d)
d <- string2path("カラテが\n高まる。", "Yu Gothic", font_weight = "bold")#
#
d <- tibble::rowid_to_column(d)
d <- string2path("カラテが\n高まる。", "Yu Gothic", font_weight = "bold")#
#
d <- tibble::rowid_to_column(d)
ggplot(mtcars, aes(x = mpg, y = wt, color = cyl)) +#
  geom_text(aes(label = model), family = family_sans, fontface = "plain") +#
  labs(x =paste(family_serif, "ボールドを使用"), y = paste(family_serif, "イタリックを使用"),#
       title = paste(family_serif, "ボールドイタリックを使用")) +#
  annotate("text", x = 10, y = 2, label = paste(family_sans, "標準書体を使用"), hjust = 0) +#
  theme(#
    text = element_text(family = family_serif, face = "plain"),#
    title = element_text(face = "bold.italic"),#
    axis.title = element_text(face = "italic"),#
    axis.title.x = element_text(face = "bold")#
    )
family_sans <- "Hiragino Mincho ProN"
ggplot(mtcars, aes(x = mpg, y = wt, color = cyl)) +#
  geom_text(aes(label = model), family = family_sans, fontface = "plain") +#
  labs(x =paste(family_serif, "ボールドを使用"), y = paste(family_serif, "イタリックを使用"),#
       title = paste(family_serif, "ボールドイタリックを使用")) +#
  annotate("text", x = 10, y = 2, label = paste(family_sans, "標準書体を使用"), hjust = 0) +#
  theme(#
    text = element_text(family = family_serif, face = "plain"),#
    title = element_text(face = "bold.italic"),#
    axis.title = element_text(face = "italic"),#
    axis.title.x = element_text(face = "bold")#
    )
family_serif <- "Hiragino Mincho ProN"
ggplot(mtcars, aes(x = mpg, y = wt, color = cyl)) +#
  geom_text(aes(label = model), family = family_sans, fontface = "plain") +#
  labs(x =paste(family_serif, "ボールドを使用"), y = paste(family_serif, "イタリックを使用"),#
       title = paste(family_serif, "ボールドイタリックを使用")) +#
  annotate("text", x = 10, y = 2, label = paste(family_sans, "標準書体を使用"), hjust = 0) +#
  theme(#
    text = element_text(family = family_serif, face = "plain"),#
    title = element_text(face = "bold.italic"),#
    axis.title = element_text(face = "italic"),#
    axis.title.x = element_text(face = "bold")#
    )
require(tidyverse)
data(mtcars)
ggplot(mtcars, aes(x = mpg, y = wt, color = cyl)) +#
  geom_text(aes(label = model), family = family_sans, fontface = "plain") +#
  labs(x =paste(family_serif, "ボールドを使用"), y = paste(family_serif, "イタリックを使用"),#
       title = paste(family_serif, "ボールドイタリックを使用")) +#
  annotate("text", x = 10, y = 2, label = paste(family_sans, "標準書体を使用"), hjust = 0) +#
  theme(#
    text = element_text(family = family_serif, face = "plain"),#
    title = element_text(face = "bold.italic"),#
    axis.title = element_text(face = "italic"),#
    axis.title.x = element_text(face = "bold")#
    )
require(systemfonts)
ggplot(mtcars, aes(x = mpg, y = wt, color = cyl)) +#
  geom_text(aes(label = model), family = family_sans, fontface = "plain") +#
  labs(x =paste(family_serif, "ボールドを使用"), y = paste(family_serif, "イタリックを使用"),#
       title = paste(family_serif, "ボールドイタリックを使用")) +#
  annotate("text", x = 10, y = 2, label = paste(family_sans, "標準書体を使用"), hjust = 0) +#
  theme(#
    text = element_text(family = family_serif, face = "plain"),#
    title = element_text(face = "bold.italic"),#
    axis.title = element_text(face = "italic"),#
    axis.title.x = element_text(face = "bold")#
    )
mtcars <- as_tibble(mtcars, rownames = "model") %>% mutate(cyl = as.character(cyl))
ggplot(mtcars, aes(x = mpg, y = wt, color = cyl)) +#
  geom_text(aes(label = model), family = family_sans, fontface = "plain") +#
  labs(x =paste(family_serif, "ボールドを使用"), y = paste(family_serif, "イタリックを使用"),#
       title = paste(family_serif, "ボールドイタリックを使用")) +#
  annotate("text", x = 10, y = 2, label = paste(family_sans, "標準書体を使用"), hjust = 0) +#
  theme(#
    text = element_text(family = family_serif, face = "plain"),#
    title = element_text(face = "bold.italic"),#
    axis.title = element_text(face = "italic"),#
    axis.title.x = element_text(face = "bold")#
    )
d
plot(d)
d
ggplot(d) +#
  geom_path(aes(x, y)
)
ggplot(d) +#
  geom_path(aes(x, y, group = path_id, colour = factor(glyph_id)),#
            linewidth = 1.5)
d <- string2path("カラテが\n高まる。", "Noto Sans JP", font_weight = "bold")#
#
d <- tibble::rowid_to_column(d)
ggplot(d) +#
  geom_path(aes(x, y, group = path_id, colour = factor(glyph_id)),#
            linewidth = 1.5)
d <- string2path("カラテが\n高まる。", "Hiragino Serif", font_weight = "bold")#
#
d <- tibble::rowid_to_column(d)
d <- string2path("カラテが\n高まる。", "Hiragino Sans", font_weight = "bold")#
#
d <- tibble::rowid_to_column(d)
ggplot(d) +#
  geom_path(aes(x, y, group = path_id, colour = factor(glyph_id)),#
            linewidth = 1.5)
ggplot(d) +#
  geom_path(aes(x, y, group = path_id, colour = factor(glyph_id)),#
            linewidth = 1.5) +#
  theme_minimal() +#
  coord_equal()
d
d <- string2path("カラテが\n高まる。", "Hiragino Sans", font_weight = "bold")
d
ggplot(d) +#
  geom_path(aes(x, y, group = path_id, colour = factor(glyph_id)),#
            linewidth = 1.5) +#
  theme_minimal() +#
  coord_equal()
ggplot(d) +#
  geom_path(aes(x, y, group = path_id, colour = factor(glyph_id)),#
            linewidth = 1.5) +#
  theme_minimal() +#
  coord_equal()
d
tibble::rowid_to_column(d)
d <- tibble::rowid_to_column(d)
ggplot(d) +#
  geom_path(aes(x, y, group = path_id, colour = factor(glyph_id)),#
            linewidth = 1.5) +#
  theme_minimal() +#
  coord_equal()
ggplot(d) +#
  geom_path(aes(x, y, group = path_id, colour = factor(glyph_id)),#
            linewidth = 1.5) +#
  theme_minimal() +#
  coord_equal() +#
  theme(legend.position = "top") +#
  scale_colour_viridis_d(option = "H")
d <- string2path("西村武司", "Hiragino Sans", font_weight = "bold")
ggplot(d) +#
  geom_path(aes(x, y, group = path_id, colour = factor(glyph_id)),#
            linewidth = 1.5) +#
  theme_minimal() +#
  coord_equal() +#
  theme(legend.position = "top") +#
  scale_colour_viridis_d(option = "H")
ggplot(d) +#
  geom_path(aes(x, y, group = path_id, colour = factor(glyph_id)),#
            linewidth = 1.5) +#
  theme_minimal() +#
  coord_equal() +#
  theme(legend.position = "top") +#
  scale_colour_viridis_d()
ggplot(d) +#
  geom_path(aes(x, y, group = path_id, colour = factor(glyph_id)),#
            linewidth = 1.5) +#
  theme_minimal() +#
  coord_equal() +#
  theme(legend.position = "top") +#
  scale_colour_viridis_d(option = "H")
ggplot(d) +#
  geom_path(aes(x, y, group = path_id, colour = factor(glyph_id)),#
            linewidth = 1.5) +#
  theme_minimal() +#
  coord_equal() +#
  theme(legend.position = "top") +#
  scale_colour_viridis_d()
ggplot(d) +#
  geom_path(aes(x, y, group = path_id, colour = factor(glyph_id)),#
            linewidth = 1.5) +#
  theme_minimal() +#
  theme(legend.position = "top") +#
  scale_colour_viridis_d()
d <- string2path("西村武司", "Hiragino Sans", font_weight = "bold")
setwd("~/Documents/GitHub/Agricultural_Markets/R/")
library(readr)#
library(tidyr)#
library(ggplot2)#
library(ggsci)#
#
d <- read_csv("../data/卸売市場経由率の推移.csv")#
#
d_long <- pivot_longer(d, cols = -年度, names_to = "name", values_to = "value")#
d_long$name <- factor(d_long$name, levels = unique(d_long$name))#
year_2010 <- d_long |> dplyr::filter(年度 == 2010)#
#
g <- ggplot(data = d_long, aes(x = 年度, y = value, group = name, colour = name)) +#
  geom_line() +#
  geom_point() +#
  geom_text(data = year_2010, aes(x = 年度, y = value, label = name, colour = name), #
            nudge_x = 0.5, nudge_y = 2.5, check_overlap = FALSE) +#
  scale_y_continuous(limits = c(0, 100)) +#
  labs(title = "卸売市場経由率の推移",#
       x = "年度", #
       y = "%",#
       caption = "農林水産省(2022)「令和3年度 卸売市場データ集」") +#
  theme_bw() +#
  theme(#
    text = element_text(family = "Hiragino Sans"),#
    legend.position = "none"#
  ) +#
  scale_color_d3()#
#
ggsave("wholesale_market_trends.png", plot = g, device = cairo_pdf, path = ".", width = 10, height = 5)
library(readr)#
library(tidyr)#
library(ggplot2)#
library(ggsci)#
#
d <- read_csv("../data/卸売市場経由率の推移.csv")#
#
d_long <- pivot_longer(d, cols = -年度, names_to = "name", values_to = "value")#
d_long$name <- factor(d_long$name, levels = unique(d_long$name))#
year_2010 <- d_long |> dplyr::filter(年度 == 2010)#
#
g <- ggplot(data = d_long, aes(x = 年度, y = value, group = name, colour = name)) +#
  geom_line() +#
  geom_point() +#
  geom_text(data = year_2010, aes(x = 年度, y = value, label = name, colour = name), #
            nudge_x = 0.5, nudge_y = 2.5, check_overlap = FALSE) +#
  scale_y_continuous(limits = c(0, 100)) +#
  labs(title = "卸売市場経由率の推移",#
       x = "年度", #
       y = "%",#
       caption = "農林水産省(2022)「令和3年度 卸売市場データ集」") +#
  theme_bw() +#
  theme(#
    text = element_text(family = "Hiragino Sans"),#
    legend.position = "none"#
  ) +#
  scale_color_d3()#
#
ggsave("wholesale_market_trends.pdf", plot = g, device = cairo_pdf, path = ".", width = 10, height = 5)
